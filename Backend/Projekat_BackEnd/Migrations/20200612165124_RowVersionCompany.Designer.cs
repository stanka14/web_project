// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Projekat_BackEnd.Models.ContextData;

namespace Projekat_BackEnd.Migrations
{
    [DbContext(typeof(ApplicationUsersContext))]
    [Migration("20200612165124_RowVersionCompany")]
    partial class RowVersionCompany
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int?>("RentACarID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RentACarID");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.Airline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Admin")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Lon")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AirlineCompanies");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.Car", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AvrageRating")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Passengers")
                        .HasColumnType("int");

                    b.Property<double>("PricePerDay")
                        .HasColumnType("float");

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.Property<int?>("RentACarID")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RentACarID");

                    b.ToTable("Car");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.CarReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CarID")
                        .HasColumnType("int");

                    b.Property<string>("PickUpLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PickUpTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RatedCar")
                        .HasColumnType("int");

                    b.Property<int>("RatedCompany")
                        .HasColumnType("int");

                    b.Property<int?>("RentACarID")
                        .HasColumnType("int");

                    b.Property<string>("ReturnLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReturnTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CarID");

                    b.HasIndex("RentACarID");

                    b.HasIndex("UserId");

                    b.ToTable("CarReservation");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.Date", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CarID")
                        .HasColumnType("int");

                    b.Property<int?>("CarReservationId")
                        .HasColumnType("int");

                    b.Property<string>("DateStr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuickReservationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarID");

                    b.HasIndex("CarReservationId");

                    b.HasIndex("QuickReservationId");

                    b.ToTable("Date");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.Destination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AirlineId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FlightId")
                        .HasColumnType("int");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AirlineId");

                    b.HasIndex("FlightId");

                    b.ToTable("Destination");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.DestinationPopular", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("AirlineId")
                        .HasColumnType("int");

                    b.Property<int?>("destinationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AirlineId");

                    b.HasIndex("destinationId");

                    b.ToTable("DestinationPopular");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("BronzeTier")
                        .HasColumnType("float");

                    b.Property<double>("DiscountPercent")
                        .HasColumnType("float");

                    b.Property<double>("GoldTier")
                        .HasColumnType("float");

                    b.Property<double>("SilverTier")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Discount");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.ExtraAmenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CarReservationId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OneTimePayment")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("RentACarID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarReservationId");

                    b.HasIndex("RentACarID");

                    b.ToTable("ExtraAmenity");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AirlineId")
                        .HasColumnType("int");

                    b.Property<string>("DepartureDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extra")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FromId")
                        .HasColumnType("int");

                    b.Property<string>("IdCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LuggageId")
                        .HasColumnType("int");

                    b.Property<int>("NumOfPassengers")
                        .HasColumnType("int");

                    b.Property<int?>("PovratniletId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<int?>("ToId")
                        .HasColumnType("int");

                    b.Property<int>("Trip")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AirlineId");

                    b.HasIndex("FromId");

                    b.HasIndex("LuggageId");

                    b.HasIndex("PovratniletId");

                    b.HasIndex("ToId");

                    b.ToTable("Flight");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.FriendRequestReceived", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FriendRequestReceived");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.FriendRequestSent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FriendRequestSent");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.Luggage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Luggage");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.QuickReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DiscountedCarID")
                        .HasColumnType("int");

                    b.Property<int?>("RentACarID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscountedCarID");

                    b.HasIndex("RentACarID");

                    b.ToTable("QuickReservation");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.Rater", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AirlineId")
                        .HasColumnType("int");

                    b.Property<int?>("FlightId")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AirlineId");

                    b.HasIndex("FlightId");

                    b.ToTable("Rater");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CarID")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<int?>("RentACarID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarID");

                    b.HasIndex("RentACarID");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.RentACar", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activated")
                        .HasColumnType("bit");

                    b.Property<int>("AvrageRating")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MainLocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("MainLocationId");

                    b.ToTable("RentACarCompanies");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FlightId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<bool>("Taken")
                        .HasColumnType("bit");

                    b.Property<string>("TravellerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.HasIndex("TravellerId");

                    b.ToTable("Seat");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AirlineId")
                        .HasColumnType("int");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<int?>("FlightId")
                        .HasColumnType("int");

                    b.Property<int?>("SeatId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("gaveRate")
                        .HasColumnType("bit");

                    b.Property<bool>("gaveRateCompany")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AirlineId");

                    b.HasIndex("FlightId");

                    b.HasIndex("SeatId");

                    b.HasIndex("UserId");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.TicketInvitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("TicketInvitation");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.Traveller", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Passport")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Traveller");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ChangedPassword")
                        .HasColumnType("bit");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("MainWebsiteAdministrator")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Passport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SocialUser")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Projekat_BackEnd.Models.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Projekat_BackEnd.Models.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Projekat_BackEnd.Models.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Projekat_BackEnd.Models.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projekat_BackEnd.Models.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Projekat_BackEnd.Models.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.Address", b =>
                {
                    b.HasOne("Projekat_BackEnd.Models.Model.RentACar", null)
                        .WithMany("Locations")
                        .HasForeignKey("RentACarID");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.Car", b =>
                {
                    b.HasOne("Projekat_BackEnd.Models.Model.RentACar", null)
                        .WithMany("Cars")
                        .HasForeignKey("RentACarID");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.CarReservation", b =>
                {
                    b.HasOne("Projekat_BackEnd.Models.Model.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarID");

                    b.HasOne("Projekat_BackEnd.Models.Model.RentACar", null)
                        .WithMany("Reservations")
                        .HasForeignKey("RentACarID");

                    b.HasOne("Projekat_BackEnd.Models.Model.User", null)
                        .WithMany("RentedCars")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.Date", b =>
                {
                    b.HasOne("Projekat_BackEnd.Models.Model.Car", null)
                        .WithMany("RentedDates")
                        .HasForeignKey("CarID");

                    b.HasOne("Projekat_BackEnd.Models.Model.CarReservation", null)
                        .WithMany("Dates")
                        .HasForeignKey("CarReservationId");

                    b.HasOne("Projekat_BackEnd.Models.Model.QuickReservation", null)
                        .WithMany("Dates")
                        .HasForeignKey("QuickReservationId");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.Destination", b =>
                {
                    b.HasOne("Projekat_BackEnd.Models.Model.Airline", null)
                        .WithMany("Destinations")
                        .HasForeignKey("AirlineId");

                    b.HasOne("Projekat_BackEnd.Models.Model.Flight", null)
                        .WithMany("Stops")
                        .HasForeignKey("FlightId");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.DestinationPopular", b =>
                {
                    b.HasOne("Projekat_BackEnd.Models.Model.Airline", null)
                        .WithMany("PopDestinaations")
                        .HasForeignKey("AirlineId");

                    b.HasOne("Projekat_BackEnd.Models.Model.Destination", "destination")
                        .WithMany()
                        .HasForeignKey("destinationId");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.ExtraAmenity", b =>
                {
                    b.HasOne("Projekat_BackEnd.Models.Model.CarReservation", null)
                        .WithMany("Extras")
                        .HasForeignKey("CarReservationId");

                    b.HasOne("Projekat_BackEnd.Models.Model.RentACar", null)
                        .WithMany("extras")
                        .HasForeignKey("RentACarID");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.Flight", b =>
                {
                    b.HasOne("Projekat_BackEnd.Models.Model.Airline", null)
                        .WithMany("Flights")
                        .HasForeignKey("AirlineId");

                    b.HasOne("Projekat_BackEnd.Models.Model.Destination", "From")
                        .WithMany()
                        .HasForeignKey("FromId");

                    b.HasOne("Projekat_BackEnd.Models.Model.Luggage", "Luggage")
                        .WithMany()
                        .HasForeignKey("LuggageId");

                    b.HasOne("Projekat_BackEnd.Models.Model.Flight", "Povratnilet")
                        .WithMany()
                        .HasForeignKey("PovratniletId");

                    b.HasOne("Projekat_BackEnd.Models.Model.Destination", "To")
                        .WithMany()
                        .HasForeignKey("ToId");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.FriendRequestReceived", b =>
                {
                    b.HasOne("Projekat_BackEnd.Models.Model.User", null)
                        .WithMany("FriendRequests")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.FriendRequestSent", b =>
                {
                    b.HasOne("Projekat_BackEnd.Models.Model.User", null)
                        .WithMany("SentRequests")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.Notification", b =>
                {
                    b.HasOne("Projekat_BackEnd.Models.Model.User", null)
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.QuickReservation", b =>
                {
                    b.HasOne("Projekat_BackEnd.Models.Model.Car", "DiscountedCar")
                        .WithMany()
                        .HasForeignKey("DiscountedCarID");

                    b.HasOne("Projekat_BackEnd.Models.Model.RentACar", null)
                        .WithMany("QuickReservations")
                        .HasForeignKey("RentACarID");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.Rater", b =>
                {
                    b.HasOne("Projekat_BackEnd.Models.Model.Airline", null)
                        .WithMany("Raters")
                        .HasForeignKey("AirlineId");

                    b.HasOne("Projekat_BackEnd.Models.Model.Flight", null)
                        .WithMany("Raters")
                        .HasForeignKey("FlightId");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.Rating", b =>
                {
                    b.HasOne("Projekat_BackEnd.Models.Model.Car", null)
                        .WithMany("Ratings")
                        .HasForeignKey("CarID");

                    b.HasOne("Projekat_BackEnd.Models.Model.RentACar", null)
                        .WithMany("Ratings")
                        .HasForeignKey("RentACarID");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.RentACar", b =>
                {
                    b.HasOne("Projekat_BackEnd.Models.Model.Address", "MainLocation")
                        .WithMany()
                        .HasForeignKey("MainLocationId");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.Seat", b =>
                {
                    b.HasOne("Projekat_BackEnd.Models.Model.Flight", null)
                        .WithMany("Seats")
                        .HasForeignKey("FlightId");

                    b.HasOne("Projekat_BackEnd.Models.Model.Traveller", "Traveller")
                        .WithMany()
                        .HasForeignKey("TravellerId");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.Ticket", b =>
                {
                    b.HasOne("Projekat_BackEnd.Models.Model.Airline", null)
                        .WithMany("FastTickets")
                        .HasForeignKey("AirlineId");

                    b.HasOne("Projekat_BackEnd.Models.Model.Flight", "Flight")
                        .WithMany("SoldTickets")
                        .HasForeignKey("FlightId");

                    b.HasOne("Projekat_BackEnd.Models.Model.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatId");

                    b.HasOne("Projekat_BackEnd.Models.Model.User", null)
                        .WithMany("Flights")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.TicketInvitation", b =>
                {
                    b.HasOne("Projekat_BackEnd.Models.Model.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId");

                    b.HasOne("Projekat_BackEnd.Models.Model.User", null)
                        .WithMany("FlightRequests")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Projekat_BackEnd.Models.Model.User", b =>
                {
                    b.HasOne("Projekat_BackEnd.Models.Model.Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountId");

                    b.HasOne("Projekat_BackEnd.Models.Model.User", null)
                        .WithMany("Friends")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
